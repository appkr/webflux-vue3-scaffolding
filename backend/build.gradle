plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib'
}

group = 'dev.appkr'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'dev.miku:r2dbc-mysql'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

processResources {
    from('../frontend/dist/') {
        it.eachFile {
            print it.getName();
        }
        into 'public'
    }
}
processResources.dependsOn ':frontend:webpackBuild'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jib {
    from {
        image = 'amazoncorretto:11-alpine-jdk'
    }

    to {
        image = "${project.name}"
        tags = ['latest', "${project.version}".toString(), getGitHash()]
    }

    containerizingMode = 'packaged'

    container {
        jvmFlags = [
                '-XX:+UseContainerSupport',
                '-XX:+HeapDumpOnOutOfMemoryError',
                '-XX:HeapDumpPath=/tmp',
                '-XX:+UseG1GC',
                '-Djava.net.preferIPv4Stack=true',
                '-Duser.timezone=Asia/Seoul',
                '-Dfile.encoding=UTF8',
                '-Dsun.net.inetaddr.ttl=30'
        ]
        ports = ['8080']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}
