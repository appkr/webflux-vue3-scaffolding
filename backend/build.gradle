plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.cloud.tools.jib'
    id 'org.openapi.generator'
}

sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    runtimeOnly 'dev.miku:r2dbc-mysql'
    runtimeOnly 'mysql:mysql-connector-java'

    implementation 'org.zalando:problem-spring-webflux:0.27.0'

    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.2'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jib {
    from {
        image = 'amazoncorretto:11-alpine-jdk'
    }

    to {
        image = "${project.name}"
        tags = ['latest', "${project.version}".toString(), getGitHash()]
    }

    containerizingMode = 'packaged'

    container {
        jvmFlags = [
                '-XX:+UseContainerSupport',
                '-XX:+HeapDumpOnOutOfMemoryError',
                '-XX:HeapDumpPath=/tmp',
                '-XX:+UseG1GC',
                '-Djava.net.preferIPv4Stack=true',
                '-Duser.timezone=Asia/Seoul',
                '-Dfile.encoding=UTF8',
                '-Dsun.net.inetaddr.ttl=30'
        ]
        ports = ['8090']
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
}

openApiGenerate {
    generatorName = 'spring'
    inputSpec = "${rootDir}/apispec/api.yml".toString()
    outputDir = "${buildDir}/openapi".toString()
    apiPackage = 'dev.appkr.api'
    modelPackage = 'dev.appkr.api.model'
    modelNameSuffix = 'Dto'
    apiFilesConstrainedTo = ['']
    modelFilesConstrainedTo = ['']
    supportingFilesConstrainedTo = ['ApiUtil.java']
    configOptions = [
            reactive: 'true',
            delegatePattern: 'true',
            useTags: 'true',
            dateLibrary: 'java8',
            java8: 'true',
            hideGenerationTimestamp: 'true'
    ]
    validateSpec = true
    importMappings = [Problem: 'org.zalando.problem.Problem']
}

sourceSets {
    main {
        java {
            srcDir file("${project.buildDir.path}/openapi/src/main/java")
        }
    }
}

compileJava.dependsOn 'openApiGenerate'

processResources {
    from('../frontend/dist/') {
        it.eachFile {
            print it.getName();
        }
        into 'public'
    }
}

processResources.dependsOn ':frontend:yarnBuild'
